name: Train-MLAgents-Modern

on:
  workflow_dispatch:
    inputs:
      gdrive_file_id:
        description: "Google Drive file id ŸÑŸÖŸÑŸÅ ÿßŸÑŸÄ ZIP ÿßŸÑÿÆÿßÿµ ÿ®ÿ®ŸÜÿßÿ° Linux"
        required: true
        default: "1wOrwyYQHbaiK_XFouEutm0t88RrlRQ5-"
      yaml_path:
        description: "ŸÖÿ≥ÿßÿ± YAML (ÿßÿÆÿ™Ÿäÿßÿ±Ÿä). ÿßÿ™ÿ±ŸÉŸá ŸÅÿßÿ∂Ÿä ŸÑÿßŸÉÿ™ÿ¥ÿßŸÅ ÿ™ŸÑŸÇÿßÿ¶Ÿä"
        required: false
        default: ""
      run_id:
        description: "Ÿàÿ≥ŸÖ ÿ™ÿ¥ÿ∫ŸäŸÑ ÿßŸÑÿ™ÿØÿ±Ÿäÿ®"
        required: true
        default: "drone_run_001"
      time_scale:
        description: "Unity time scale (ŸÉŸÑŸÖÿß ÿ≤ÿßÿØ ÿ£ÿ≥ÿ±ÿπ)"
        required: true
        default: "20"

jobs:
  train:
    runs-on: ubuntu-latest
    timeout-minutes: 360
    env:
      PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION: python

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Show repo contents (debug)
        run: |
          echo "PWD: $(pwd)"
          echo "Branch: ${{ github.ref }}"
          echo "Root listing:"
          ls -la
          echo "Search for interceptor yaml candidates:"
          find . -maxdepth 5 -iname "interceptor*.yml*" -print || true

      - name: Resolve YAML path
        id: resolveyaml
        run: |
          INP="${{ github.event.inputs.yaml_path }}"
          if [ -n "$INP" ] && [ -f "$INP" ]; then
            echo "yaml_path=$INP" >> $GITHUB_OUTPUT
            echo "Using provided YAML: $INP"
            exit 0
          fi

          for p in \
            interceptor_pro.yaml \
            interceptor_pro.yml \
            config/interceptor_pro.yaml \
            config/interceptor_pro.yml \
            Assets/config/interceptor_pro.yaml \
            Assets/config/interceptor_pro.yml
          do
            if [ -f "$p" ]; then
              echo "yaml_path=$p" >> $GITHUB_OUTPUT
              echo "Auto-detected YAML at $p"
              exit 0
            fi
          done

          CAND=$(find . -maxdepth 5 -iname "interceptor*.yml*" | head -n1)
          if [ -n "$CAND" ] && [ -f "$CAND" ]; then
            echo "yaml_path=$CAND" >> $GITHUB_OUTPUT
            echo "Found YAML at $CAND"
            exit 0
          fi

          echo "Could not find interceptor_pro.yaml/.yml. Commit it ÿ£Ÿà ÿ≠ÿØÿØ 'yaml_path' ÿπŸÜÿØ ÿ™ÿ¥ÿ∫ŸäŸÑ ÿßŸÑŸÄ workflow."
          exit 1

      - name: Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install modern ML-Agents stack
        run: |
          python -m pip install -U pip wheel setuptools
          # Install minimal graphics dependencies for headless Unity
          sudo apt-get update
          sudo apt-get install -y xvfb libopengl0 libglu1-mesa libxrandr2 libxinerama1 libxcursor1 || echo "Some packages failed, continuing..."
          
          # Install modern PyTorch that works with recent ML-Agents
          pip install torch torchvision --index-url https://download.pytorch.org/whl/cpu
          
          # Install ML-Agents - use newer version that's compatible with Unity 2.0.1
          pip install mlagents==1.0.0
          pip install gdown

      - name: Download Linux build from Google Drive
        run: |
          mkdir -p env_zip
          gdown --id "${{ github.event.inputs.gdrive_file_id }}" -O env_zip/build.zip
          ls -lh env_zip

      - name: Unzip build and make executable (robust)
        id: unzipbuild
        run: |
          mkdir -p env
          unzip -q env_zip/build.zip -d ./env || { echo "Unzip failed"; exit 1; }

          echo "Top-level after unzip:"
          find ./env -maxdepth 3 -print

          # ÿßŸÖÿ≥ŸÉ ÿ£ŸàŸÑ ŸÖŸÑŸÅ ÿ™ŸÜŸÅŸäÿ∞Ÿä ŸÑŸäŸÜŸèŸÉÿ≥ .x86_64 Ÿàÿ™ÿ¨ÿßŸáŸÑ __MACOSX
          EXE=$(find ./env -type f -iname "*.x86_64" ! -path "*/__MACOSX/*" | head -n1)

          if [ -z "$EXE" ]; then
            echo "No .x86_64 executable found. Full tree for debug:"
            find ./env -maxdepth 5 -print
            exit 1
          fi

          chmod +x "$EXE"
          echo "exe_path=$EXE" >> $GITHUB_OUTPUT
          echo "Using executable: $EXE"
          
          # Check executable details
          echo "=== Executable Info ==="
          ls -la "$EXE"
          file "$EXE"
          ldd "$EXE" | head -10 || echo "ldd failed"

      - name: Test environment with probe
        env:
          ENV_PATH: ${{ steps.unzipbuild.outputs.exe_path }}
          DISPLAY: :99
        run: |
          # Start virtual display
          Xvfb :99 -screen 0 1024x768x24 &
          sleep 3
          
          echo "=== Testing Environment ==="
          python -c "
          import os
          import sys
          from mlagents_envs.environment import UnityEnvironment
          
          env_path = os.environ.get('ENV_PATH')
          print(f'[Test] Environment path: {env_path}')
          print(f'[Test] File exists: {os.path.exists(env_path)}')
          
          try:
              env = UnityEnvironment(file_name=env_path, no_graphics=True, timeout_wait=120)
              env.reset()
              behaviors = list(env.behavior_specs.keys())
              print(f'[Test] ‚úÖ Found behaviors: {behaviors}')
              
              for behavior_name in behaviors:
                  spec = env.behavior_specs[behavior_name]
                  print(f'[Test] {behavior_name}:')
                  print(f'  - Observation shapes: {[obs.shape for obs in spec.observation_specs]}')
                  if spec.action_spec.is_discrete():
                      print(f'  - Action space: discrete {spec.action_spec.discrete_branch_sizes}')
                  else:
                      print(f'  - Action space: continuous {spec.action_spec.continuous_size}')
              
              env.close()
              print('[Test] ‚úÖ Environment test successful!')
              
          except Exception as e:
              print(f'[Test] ‚ùå Environment test failed: {e}')
              import traceback
              traceback.print_exc()
              sys.exit(1)
          "

      - name: Train with ML-Agents
        env:
          ENV_PATH: ${{ steps.unzipbuild.outputs.exe_path }}
          DISPLAY: :99
        run: |
          echo "YAML path: ${{ steps.resolveyaml.outputs.yaml_path }}"
          echo "Environment: ${ENV_PATH}"
          
          # Ensure virtual display is running
          pgrep Xvfb || Xvfb :99 -screen 0 1024x768x24 &
          sleep 2
          
          # Run training
          echo "=== Starting ML-Agents Training ==="
          timeout 340m mlagents-learn "${{ steps.resolveyaml.outputs.yaml_path }}" \
            --env="${ENV_PATH}" \
            --run-id="${{ github.event.inputs.run_id }}" \
            --no-graphics \
            --time-scale="${{ github.event.inputs.time_scale }}" \
            --force || {
            
            TRAINING_EXIT_CODE=$?
            echo "Training process ended with exit code: $TRAINING_EXIT_CODE"
            
            echo "=== Checking Results ==="
            if [ -d "results/${{ github.event.inputs.run_id }}" ]; then
              echo "‚úÖ Results directory found!"
              find "results/${{ github.event.inputs.run_id }}" -type f | head -10
              
              # Check for model files
              if find "results/${{ github.event.inputs.run_id }}" -name "*.onnx" -o -name "*.nn" | grep -q .; then
                echo "‚úÖ Model files found!"
                find "results/${{ github.event.inputs.run_id }}" -name "*.onnx" -o -name "*.nn"
                exit 0
              else
                echo "‚ùå No model files found"
                exit 1
              fi
            else
              echo "‚ùå No results directory found"
              exit 1
            fi
          }

      - name: Display training results
        if: always()
        run: |
          echo "=== Final Results ==="
          if [ -d "results/${{ github.event.inputs.run_id }}" ]; then
            echo "‚úÖ Training completed!"
            echo "üìÅ Files created:"
            find results/${{ github.event.inputs.run_id }} -type f | head -15
            echo ""
            echo "üß† Models:"
            find results/${{ github.event.inputs.run_id }} -name "*.onnx" -o -name "*.nn" | while read file; do
              echo "  üìÑ $file ($(du -h "$file" | cut -f1))"
            done
          else
            echo "‚ùå No training results"
          fi

      - name: Upload training results
        uses: actions/upload-artifact@v4
        with:
          name: results-${{ github.event.inputs.run_id }}
          path: results

      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: logs-${{ github.event.inputs.run_id }}
          path: |
            *.log
            results/*/run_logs/
        continue-on-error: true
