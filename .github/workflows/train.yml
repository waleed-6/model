name: Train-MLAgents-CPU

on:
  workflow_dispatch:
    inputs:
      gdrive_file_id:
        description: "Google Drive file ID for Linux build ZIP"
        required: true
        default: "1wOrwyYQHbaiK_XFouEutm0t88RrlRQ5-"
      yaml_path:
        description: "Path to YAML config (optional - leave empty for auto-detection)"
        required: false
        default: ""
      run_id:
        description: "Training run identifier"
        required: true
        default: "drone_run_001"
      time_scale:
        description: "Unity time scale (higher = faster training)"
        required: true
        default: "20"
      max_steps:
        description: "Maximum training steps"
        required: false
        default: "500000"

jobs:
  train:
    runs-on: ubuntu-latest
    timeout-minutes: 360

    env:
      PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION: python
      DISPLAY: ":99"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup virtual display
        run: |
          sudo apt-get update
          sudo apt-get install -y xvfb
          Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &

      - name: Debug repository contents
        run: |
          echo "Current working directory: $(pwd)"
          echo "Git branch: ${{ github.ref }}"
          echo "Repository structure:"
          find . -maxdepth 3 -type f \( -name "*.yml" -o -name "*.yaml" -o -name "*.json" \) -print
          echo "Looking for interceptor configs:"
          find . -maxdepth 5 -iname "*interceptor*" -type f -print || echo "No interceptor files found"

      - name: Set up Python 3.9
        uses: actions/setup-python@v5
        with:
          python-version: "3.9"

      - name: Install ML-Agents and dependencies
        run: |
          python -m pip install --upgrade pip
          pip install torch==1.13.1 torchvision==0.14.1 --extra-index-url https://download.pytorch.org/whl/cpu
          pip install "protobuf==3.20.3"
          pip install "mlagents==0.30.0"
          pip install "tensorboard==2.11.2"
          pip install gdown requests
          python -c "import mlagents; print(f'ML-Agents version: {mlagents.__version__}')"
          mlagents-learn --help > /dev/null && echo "mlagents-learn command available"

      - name: Resolve training configuration
        id: resolve_config
        run: |
          USER_YAML="${{ github.event.inputs.yaml_path }}"
          
          if [[ -n "$USER_YAML" && -f "$USER_YAML" ]]; then
            echo "yaml_path=$USER_YAML" >> $GITHUB_OUTPUT
            echo "Using user-specified YAML: $USER_YAML"
            exit 0
          fi
          
          SEARCH_PATHS=(
            "interceptor_pro.yaml"
            "interceptor_pro.yml"
            "config/interceptor_pro.yaml" 
            "config/interceptor_pro.yml"
            "Assets/config/interceptor_pro.yaml"
            "Assets/config/interceptor_pro.yml"
            "Assets/ML-Agents/interceptor_pro.yaml"
            "Assets/ML-Agents/interceptor_pro.yml"
          )
          
          for path in "${SEARCH_PATHS[@]}"; do
            if [[ -f "$path" ]]; then
              echo "yaml_path=$path" >> $GITHUB_OUTPUT
              echo "Auto-detected training config: $path"
              exit 0
            fi
          done
          
          FOUND_CONFIG=$(find . -maxdepth 5 -iname "*interceptor*.yml*" -type f | head -n1)
          if [[ -n "$FOUND_CONFIG" ]]; then
            echo "yaml_path=$FOUND_CONFIG" >> $GITHUB_OUTPUT
            echo "Found config file: $FOUND_CONFIG"
            exit 0
          fi
          
          echo "yaml_path=" >> $GITHUB_OUTPUT
          echo "No training configuration found - will run environment probe only"

      - name: Download Unity build from Google Drive
        run: |
          echo "Downloading build from Google Drive..."
          mkdir -p env_download
          cd env_download
          
          for i in {1..3}; do
            if gdown --id "${{ github.event.inputs.gdrive_file_id }}" -O build.zip; then
              echo "Download successful on attempt $i"
              break
            else
              echo "Download attempt $i failed, retrying..."
              sleep 5
            fi
          done
          
          if [[ ! -f "build.zip" ]]; then
            echo "Failed to download build.zip after 3 attempts"
            exit 1
          fi
          
          echo "Downloaded file info:"
          ls -lh build.zip
          
          if ! unzip -t build.zip > /dev/null 2>&1; then
            echo "Downloaded file is not a valid ZIP archive"
            file build.zip
            exit 1
          fi

      - name: Extract and prepare Unity executable
        id: prepare_build
        run: |
          echo "Extracting Unity build..."
          mkdir -p unity_env
          cd unity_env
          
          unzip -q ../env_download/build.zip
          
          echo "Contents after extraction:"
          find . -maxdepth 3 -type f -print
          
          EXECUTABLE=$(find . -type f -name "*.x86_64" ! -path "*/__MACOSX/*" ! -path "*/._*" | head -n1)
          
          if [[ -z "$EXECUTABLE" ]]; then
            echo "Error: No Linux executable (.x86_64) found in the build"
            echo "Available files:"
            find . -type f -print
            exit 1
          fi
          
          chmod +x "$EXECUTABLE"
          ABS_PATH=$(realpath "$EXECUTABLE")
          echo "exe_path=$ABS_PATH" >> $GITHUB_OUTPUT
          echo "Unity executable prepared: $ABS_PATH"
          
          if [[ ! -x "$ABS_PATH" ]]; then
            echo "Error: Executable is not properly set up"
            exit 1
          fi

      - name: Probe Unity environment
        id: probe_env
        env:
          UNITY_ENV: ${{ steps.prepare_build.outputs.exe_path }}
        run: |
          echo "Probing Unity environment: $UNITY_ENV"
          
          cat > probe_env.py << 'EOF'
import os
import sys
import json
from mlagents_envs.environment import UnityEnvironment

def probe_environment():
    env_path = os.environ.get("UNITY_ENV")
    if not env_path:
        print("Error: UNITY_ENV not set")
        return False
        
    print(f"Probing Unity environment: {env_path}")
    
    try:
        env = UnityEnvironment(
            file_name=env_path,
            no_graphics=True,
            timeout_wait=300,
            seed=42
        )
        
        env.reset()
        
        behavior_names = list(env.behavior_specs.keys())
        print(f"Found {len(behavior_names)} behavior(s): {behavior_names}")
        
        behavior_info = {}
        for name in behavior_names:
            spec = env.behavior_specs[name]
            
            obs_shapes = [obs_spec.shape for obs_spec in spec.observation_specs]
            
            if spec.action_spec.is_continuous():
                action_info = {
                    "type": "continuous", 
                    "size": spec.action_spec.continuous_size
                }
            else:
                action_info = {
                    "type": "discrete",
                    "branches": spec.action_spec.discrete_branch_sizes
                }
            
            behavior_info[name] = {
                "observations": obs_shapes,
                "actions": action_info
            }
            
            print(f"Behavior '{name}':")
            print(f"  Observations: {obs_shapes}")
            print(f"  Actions: {action_info}")
        
        with open("behavior_specs.json", "w") as f:
            json.dump(behavior_info, f, indent=2)
            
        with open("behavior_names.txt", "w") as f:
            for name in behavior_names:
                f.write(f"{name}\n")
        
        env.close()
        print("Environment probe completed successfully")
        return True
        
    except Exception as e:
        print(f"Error during probe: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = probe_environment()
    sys.exit(0 if success else 1)
EOF
          
          python probe_env.py
          
          if [[ -f "behavior_specs.json" ]]; then
            echo "Behavior specifications:"
            cat behavior_specs.json
          fi

      - name: Create default training config
        if: ${{ steps.resolve_config.outputs.yaml_path == '' }}
        run: |
          echo "No training config found, creating default configuration..."
          
          if [[ -f "behavior_names.txt" ]]; then
            BEHAVIOR_NAME=$(head -n1 behavior_names.txt | tr -d '\n\r')
          else
            BEHAVIOR_NAME="DroneAgent"
          fi
          
          cat > default_config.yaml << 'EOF'
behaviors:
  BEHAVIOR_NAME_PLACEHOLDER:
    trainer_type: ppo
    hyperparameters:
      batch_size: 1024
      buffer_size: 10240
      learning_rate: 3.0e-4
      beta: 5.0e-4
      epsilon: 0.2
      lambd: 0.99
      num_epoch: 3
      learning_rate_schedule: linear
    network_settings:
      normalize: false
      hidden_units: 128
      num_layers: 2
    reward_signals:
      extrinsic:
        gamma: 0.99
        strength: 1.0
    max_steps: MAX_STEPS_PLACEHOLDER
    time_horizon: 64
    summary_freq: 10000
    threaded: true
EOF
          
          sed -i "s/BEHAVIOR_NAME_PLACEHOLDER/$BEHAVIOR_NAME/g" default_config.yaml
          sed -i "s/MAX_STEPS_PLACEHOLDER/${{ github.event.inputs.max_steps }}/g" default_config.yaml
          
          echo "yaml_path=default_config.yaml" >> $GITHUB_OUTPUT
          echo "Created default training configuration for behavior: $BEHAVIOR_NAME"

      - name: Upload environment probe results
        uses: actions/upload-artifact@v4
        with:
          name: environment-probe-${{ github.event.inputs.run_id }}
          path: |
            behavior_names.txt
            behavior_specs.json

      - name: Start ML-Agents training
        if: ${{ steps.resolve_config.outputs.yaml_path != '' }}
        env:
          UNITY_ENV: ${{ steps.prepare_build.outputs.exe_path }}
        run: |
          CONFIG_FILE="${{ steps.resolve_config.outputs.yaml_path }}"
          if [[ -z "$CONFIG_FILE" ]]; then
            CONFIG_FILE="default_config.yaml"
          fi
          
          echo "Starting training with configuration: $CONFIG_FILE"
          echo "Unity environment: $UNITY_ENV"
          echo "Run ID: ${{ github.event.inputs.run_id }}"
          echo "Time scale: ${{ github.event.inputs.time_scale }}"
          
          if [[ ! -f "$CONFIG_FILE" ]]; then
            echo "Error: Training configuration file '$CONFIG_FILE' not found"
            exit 1
          fi
          
          echo "Training configuration:"
          cat "$CONFIG_FILE"
          
          mlagents-learn "$CONFIG_FILE" \
            --env="$UNITY_ENV" \
            --run-id="${{ github.event.inputs.run_id }}" \
            --no-graphics \
            --time-scale="${{ github.event.inputs.time_scale }}" \
            --width=84 \
            --height=84 \
            --quality-level=0

      - name: Upload training results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: training-results-${{ github.event.inputs.run_id }}
          path: results/
