name: Train-MLAgents-Dynamic

on:
  workflow_dispatch:
    inputs:
      gdrive_file_id:
        description: "Google Drive file id ŸÑŸÖŸÑŸÅ ÿßŸÑŸÄ ZIP ÿßŸÑÿÆÿßÿµ ÿ®ÿ®ŸÜÿßÿ° Linux"
        required: true
        default: "1wOrwyYQHbaiK_XFouEutm0t88RrlRQ5-"
      run_id:
        description: "Ÿàÿ≥ŸÖ ÿ™ÿ¥ÿ∫ŸäŸÑ ÿßŸÑÿ™ÿØÿ±Ÿäÿ®"
        required: true
        default: "drone_run_001"
      time_scale:
        description: "Unity time scale (ŸÉŸÑŸÖÿß ÿ≤ÿßÿØ ÿ£ÿ≥ÿ±ÿπ)"
        required: true
        default: "20"

jobs:
  train:
    runs-on: ubuntu-latest
    timeout-minutes: 360
    env:
      PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION: python

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Python 3.8.18
        uses: actions/setup-python@v5
        with:
          python-version: "3.8.18"

      - name: Install ML-Agents stack
        run: |
          python -m pip install -U pip wheel setuptools
          sudo apt-get update
          sudo apt-get install -y xvfb
          
          # Fix protobuf first
          pip install "protobuf==3.20.3"
          
          # Install ML-Agents
          pip install torch==1.11.0 torchvision==0.12.0
          pip install mlagents==0.27.0
          pip install gdown

      - name: Download and extract Unity build
        run: |
          mkdir -p env_zip
          gdown --id "${{ github.event.inputs.gdrive_file_id }}" -O env_zip/build.zip
          
          mkdir -p env
          unzip -q env_zip/build.zip -d ./env
          
          EXE=$(find ./env -type f -iname "*.x86_64" ! -path "*/__MACOSX/*" | head -n1)
          if [ -z "$EXE" ]; then
            echo "‚ùå No executable found!"
            exit 1
          fi
          
          chmod +x "$EXE"
          echo "EXE_PATH=$EXE" >> $GITHUB_ENV
          echo "‚úÖ Executable ready: $EXE"

      - name: Detect behavior name and create config
        env:
          DISPLAY: :99
        run: |
          # Start virtual display
          Xvfb :99 -screen 0 1024x768x24 &
          sleep 3
          
          echo "üîç Detecting behavior name from Unity environment..."
          
          # Detect behavior name
          BEHAVIOR_NAME=$(python -c "
          import os
          import sys
          from mlagents_envs.environment import UnityEnvironment
          
          env_path = os.environ.get('EXE_PATH')
          
          try:
              env = UnityEnvironment(file_name=env_path, no_graphics=True, timeout_wait=60)
              env.reset()
              behaviors = list(env.behavior_specs.keys())
              env.close()
              
              if behaviors:
                  behavior_name = behaviors[0]  # Take the first behavior
                  print(behavior_name)
              else:
                  print('ERROR: No behaviors found')
                  sys.exit(1)
                  
          except Exception as e:
              print(f'ERROR: {e}')
              sys.exit(1)
          ")
          
          if [[ "$BEHAVIOR_NAME" == ERROR* ]]; then
            echo "‚ùå Failed to detect behavior name: $BEHAVIOR_NAME"
            exit 1
          fi
          
          echo "‚úÖ Detected behavior name: '$BEHAVIOR_NAME'"
          echo "BEHAVIOR_NAME=$BEHAVIOR_NAME" >> $GITHUB_ENV
          
          # Create config with detected behavior name
          cat > dynamic_config.yaml << EOF
          behaviors:
            "$BEHAVIOR_NAME":
              trainer_type: ppo
              hyperparameters:
                batch_size: 2048
                buffer_size: 20480
                learning_rate: 3.0e-4
                beta: 5.0e-3
                epsilon: 0.2
                lambd: 0.95
                num_epoch: 3
                learning_rate_schedule: constant
              network_settings:
                normalize: true
                hidden_units: 256
                num_layers: 2
              reward_signals:
                extrinsic:
                  gamma: 0.995
                  strength: 1.0
              max_steps: 2000000
              time_horizon: 128
              summary_freq: 10000
              checkpoint_interval: 200000
          EOF
          
          echo "üìù Generated config for behavior '$BEHAVIOR_NAME':"
          cat dynamic_config.yaml

      - name: Run ML-Agents training
        env:
          DISPLAY: :99
        run: |
          # Ensure display is running
          pgrep Xvfb || Xvfb :99 -screen 0 1024x768x24 &
          sleep 2
          
          echo "üöÄ Starting training..."
          echo "Environment: $EXE_PATH"
          echo "Behavior: $BEHAVIOR_NAME"
          echo "Run ID: ${{ github.event.inputs.run_id }}"
          
          # Run training
          timeout 330m mlagents-learn dynamic_config.yaml \
            --env="$EXE_PATH" \
            --run-id="${{ github.event.inputs.run_id }}" \
            --no-graphics \
            --time-scale="${{ github.event.inputs.time_scale }}" \
            --force \
            --base-port=5005 2>&1 | tee training.log || {
            
            EXIT_CODE=${PIPESTATUS[0]}
            echo "Training ended with code: $EXIT_CODE"
            
            # Check for results
            if [ -d "results/${{ github.event.inputs.run_id }}" ]; then
              echo "‚úÖ Results found!"
              MODEL_FILES=$(find "results/${{ github.event.inputs.run_id }}" -name "*.onnx" -o -name "*.nn")
              if [ -n "$MODEL_FILES" ]; then
                echo "‚úÖ Model files created - training successful!"
                echo "$MODEL_FILES"
                exit 0
              fi
            fi
            
            echo "‚ùå Training failed"
            tail -50 training.log
            exit 1
          }

      - name: Show results
        if: always()
        run: |
          if [ -d "results/${{ github.event.inputs.run_id }}" ]; then
            echo "=== Training Results ==="
            echo "Behavior trained: $BEHAVIOR_NAME"
            echo ""
            echo "üìÅ Files created:"
            find "results/${{ github.event.inputs.run_id }}" -type f | sort
            echo ""
            echo "üß† Model files:"
            find "results/${{ github.event.inputs.run_id }}" -name "*.onnx" -o -name "*.nn" | while read f; do
              echo "  üìÑ $f ($(du -h "$f" | cut -f1))"
            done
          fi

      - name: Upload results
        uses: actions/upload-artifact@v4
        with:
          name: training-results-${{ github.event.inputs.run_id }}
          path: results
        if: always()

      - name: Upload logs
        uses: actions/upload-artifact@v4
        with:
          name: training-logs-${{ github.event.inputs.run_id }}
          path: |
            *.log
            *.yaml
            results/*/run_logs/
        if: always()
        continue-on-error: true
